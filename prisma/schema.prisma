// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userID          String    @unique
  nickname        String    
  email           String    @unique
  profileImageUrl String?
  friendCode      String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  FriendRequests  FriendRequest[] @relation("Requester") // 사용자가 보낸 친구 요청들
  ReceivedRequests FriendRequest[] @relation("Receiver") // 사용자가 받은 친구 요청들

  Friends          Friend[]        @relation("UserFriend") // 사용자가 추가한 친구 목록
  FriendUsers      Friend[]        @relation("FriendUser") // 사용자를 친구로 추가한 사용자 목록
}

model FriendRequest {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  requesterID String // 요청자(userID) 참조
  receiverID  String // 요청 받은 사람(userID) 참조
  status      FriendRequestStatus @default(PENDING) // 친구 요청 상태
  createdAt   DateTime  @default(now()) 
  updatedAt   DateTime  @default(now())

  requester   User      @relation("Requester", fields: [requesterID], references: [userID]) // 요청 보낸 사용자
  receiver    User      @relation("Receiver", fields: [receiverID], references: [userID]) // 요청 받은 사용자

  @@unique([requesterID, receiverID]) // 동일한 사용자 간의 중복 요청 방지
}

enum FriendRequestStatus {
  PENDING // 요청 대기 상태
  ACCEPTED // 요청 수락 상태
  DECLINED // 요청 거절 상태
}

model Friend {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userID       String // 사용자(userID) 참조
  friendUserID String // 친구(userID) 참조
  isFixed      Boolean   @default(false) // 친구 목록에서 고정 여부
  fixedAt      DateTime? 
  createdAt    DateTime  @default(now())

  user         User      @relation("UserFriend", fields: [userID], references: [userID]) // 친구 관계의 주체
  friendUser   User      @relation("FriendUser", fields: [friendUserID], references: [userID]) // 친구 관계의 대상

  @@unique([userID, friendUserID]) // 동일한 사용자 간 중복 친구 관계 방지
}