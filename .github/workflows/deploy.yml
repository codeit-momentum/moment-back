name: CI/CD for Node.js with Docker and AWS Lightsail

on:
  push: # main이나 develop 브랜치에 push가 되었을 때 실행
    branches: 
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      # 2. Docker 메모리 설정
      - name: Increase Docker memory
        run: |
          sudo sysctl -w vm.max_map_count=262144
          sudo service docker restart

      # 3. SSH 설정
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 4. Known Hosts 설정
      - name: Set up known hosts
        run: |
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # 5. .env 파일 생성
      - name: Create .env files
        run: |
          printf "%s" "${{ secrets.ENV_FILE }}" > .env
          printf "%s" "${{ secrets.ENV_PRODUCTION_FILE }}" > .env.production

      # 6. Docker 이미지 빌드 및 Lightsail 서버로 전송
      #- name: Build and Push Docker Image
      #  env:
      #    DOCKER_BUILDKIT: 1
      #  run: |
      #    IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
      #    docker build -t codeit-momentum:$IMAGE_TAG .
      #    docker save codeit-momentum:$IMAGE_TAG | ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_PUBLIC_IP }} "docker load"

      # 7. Lightsail 서버로 파일 업로드
      - name: Upload Files to Lightsail
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_PUBLIC_IP }} "
            mkdir -p /home/ubuntu/my-app &&
            rm -f /home/ubuntu/my-app/.env /home/ubuntu/my-app/.env.production"
          scp -r ./* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_PUBLIC_IP }}:/home/ubuntu/my-app/

      # 8. Lightsail 서버에서 Docker Compose 배포
      - name: Deploy on Lightsail
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_PUBLIC_IP }} << 'EOF'
            cd /home/ubuntu/my-app
            docker-compose down
            docker-compose up -d --build
          EOF